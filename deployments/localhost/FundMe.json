{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x74e46dcba8a74eadbd154ce5bec6b4dec47076c004066d4a3946133ff904b6ed",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1098947",
    "logsBloom": "0x
    "blockHash": "0x6b0c26ad08d1dd1d334dd53de8b651c92b7f0043e770e5669ee63b8f700b2b83",
    "transactionHash": "0x74e46dcba8a74eadbd154ce5bec6b4dec47076c004066d4a3946133ff904b6ed",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1098947",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "e705cb352868f445d69ae82e847447ca",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Edoardo Busano\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"getAddressToAmountFunded(address)\":{\"params\":{\"fundingAddress\":\"the address of the funder\"},\"returns\":{\"_0\":\"the amount funded\"}}},\"title\":\"A sample Funding Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"Funds our contract based on the ETH/USD price\"},\"getAddressToAmountFunded(address)\":{\"notice\":\"Gets the amount that an address has funded\"}},\"notice\":\"This contract is for creating a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Interfaces, Libraries, Contracts\\n//error FundMe__NotOwner();\\n\\n/**@title A sample Funding Contract\\n * @author Edoardo Busano\\n * @notice This contract is for creating a sample funding contract\\n * @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State variables\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    address private immutable i_owner;\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // Events (we have none!)\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == i_owner);\\n        if (msg.sender != i_owner)\\n            revert(\\\"You are not the owner of this contract!\\\");\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// external\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeed) {\\n        s_priceFeed = AggregatorV3Interface(priceFeed);\\n        i_owner = msg.sender;\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /// @notice Funds our contract based on the ETH/USD price\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // Transfer vs call vs Send\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        // mappings can't be in memory, sorry!\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // payable(msg.sender).transfer(address(this).balance);\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(success);\\n    }\\n\\n    /** @notice Gets the amount that an address has funded\\n     *  @param fundingAddress the address of the funder\\n     *  @return the amount funded\\n     */\\n    function getAddressToAmountFunded(address fundingAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[fundingAddress];\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0x8586474f7bbca5643798e07b817d78d311a0ffba88f741b207bd35b67103e2cd\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    // call it get fiatConversionRate, since it assumes something about decimals\\n    // It wouldn't work for every aggregator\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversation rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x816bfc0d7085476448fbd75002e92b51d4498a9d9d5b7944044639b1cf8ebdc1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200141038038062001410833981810160405281019062000037919062000120565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112836200018d60003960008181610414015281816105b001528181610656015281816106a601526108a501526112836000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b68565b610322565b6040516100d79190610bae565b60405180910390f35b3480156100ec57600080fd5b506100f561036b565b6040516101029190610bae565b60405180910390f35b610113610412565b005b34801561012157600080fd5b5061012a610645565b6040516101379190610bae565b60405180910390f35b34801561014c57600080fd5b50610155610652565b6040516101629190610bd8565b60405180910390f35b34801561017757600080fd5b5061018061067a565b60405161018d9190610c52565b60405180910390f35b61019e6101e7565b005b6101a86106a4565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610c99565b61093b565b6040516101de9190610bd8565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098290919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d23565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b69190610d72565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610ddd565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790610e7c565b60405180910390fd5b60005b60008054905081101561054b5760008082815481106104c5576104c4610e9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054390610ecb565b9150506104a3565b50600067ffffffffffffffff81111561056757610566610f14565b5b6040519080825280602002602001820160405280156105955781602001602082028036833780820191505090505b50600090805190602001906105ab929190610a5e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516105f290610f74565b60006040518083038185875af1925050503d806000811461062f576040519150601f19603f3d011682016040523d82523d6000602084013e610634565b606091505b505090508061064257600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072990610e7c565b60405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076b575b5050505050905060005b81518110156108405760008282815181106107dd576107dc610e9c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083890610ecb565b9150506107bf565b50600067ffffffffffffffff81111561085c5761085b610f14565b5b60405190808252806020026020018201604052801561088a5781602001602082028036833780820191505090505b50600090805190602001906108a0929190610a5e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e790610f74565b60006040518083038185875af1925050503d8060008114610924576040519150601f19603f3d011682016040523d82523d6000602084013e610929565b606091505b505090508061093757600080fd5b5050565b60008082815481106109505761094f610e9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061098e836109be565b90506000670de0b6b3a764000085836109a79190610f89565b6109b19190611012565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906110bb565b5050509150506402540be40081610a569190611136565b915050919050565b828054828255906000526020600020908101928215610ad7579160200282015b82811115610ad65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a7e565b5b509050610ae49190610ae8565b5090565b5b80821115610b01576000816000905550600101610ae9565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3582610b0a565b9050919050565b610b4581610b2a565b8114610b5057600080fd5b50565b600081359050610b6281610b3c565b92915050565b600060208284031215610b7e57610b7d610b05565b5b6000610b8c84828501610b53565b91505092915050565b6000819050919050565b610ba881610b95565b82525050565b6000602082019050610bc36000830184610b9f565b92915050565b610bd281610b2a565b82525050565b6000602082019050610bed6000830184610bc9565b92915050565b6000819050919050565b6000610c18610c13610c0e84610b0a565b610bf3565b610b0a565b9050919050565b6000610c2a82610bfd565b9050919050565b6000610c3c82610c1f565b9050919050565b610c4c81610c31565b82525050565b6000602082019050610c676000830184610c43565b92915050565b610c7681610b95565b8114610c8157600080fd5b50565b600081359050610c9381610c6d565b92915050565b600060208284031215610caf57610cae610b05565b5b6000610cbd84828501610c84565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d0d601b83610cc6565b9150610d1882610cd7565b602082019050919050565b60006020820190508181036000830152610d3c81610d00565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7d82610b95565b9150610d8883610b95565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dbd57610dbc610d43565b5b828201905092915050565b600081519050610dd781610c6d565b92915050565b600060208284031215610df357610df2610b05565b5b6000610e0184828501610dc8565b91505092915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320636f60008201527f6e74726163742100000000000000000000000000000000000000000000000000602082015250565b6000610e66602783610cc6565b9150610e7182610e0a565b604082019050919050565b60006020820190508181036000830152610e9581610e59565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ed682610b95565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f0957610f08610d43565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f5e600083610f43565b9150610f6982610f4e565b600082019050919050565b6000610f7f82610f51565b9150819050919050565b6000610f9482610b95565b9150610f9f83610b95565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fd857610fd7610d43565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101d82610b95565b915061102883610b95565b92508261103857611037610fe3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106281611043565b811461106d57600080fd5b50565b60008151905061107f81611059565b92915050565b6000819050919050565b61109881611085565b81146110a357600080fd5b50565b6000815190506110b58161108f565b92915050565b600080600080600060a086880312156110d7576110d6610b05565b5b60006110e588828901611070565b95505060206110f6888289016110a6565b945050604061110788828901610dc8565b935050606061111888828901610dc8565b925050608061112988828901611070565b9150509295509295909350565b600061114182611085565b915061114c83611085565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561118b5761118a610d43565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111c8576111c7610d43565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561120557611204610d43565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561124257611241610d43565b5b82820290509291505056fea2646970667358221220ec93b45c24457184c43f7ffd429216a3946aeef41843b98b0d14a3ad7b2fcbb464736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101aa57610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101e7565b005b6100a16101e7565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b68565b610322565b6040516100d79190610bae565b60405180910390f35b3480156100ec57600080fd5b506100f561036b565b6040516101029190610bae565b60405180910390f35b610113610412565b005b34801561012157600080fd5b5061012a610645565b6040516101379190610bae565b60405180910390f35b34801561014c57600080fd5b50610155610652565b6040516101629190610bd8565b60405180910390f35b34801561017757600080fd5b5061018061067a565b60405161018d9190610c52565b60405180910390f35b61019e6101e7565b005b6101a86106a4565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190610c99565b61093b565b6040516101de9190610bd8565b60405180910390f35b6802b5e3af16b1880000610226600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461098290919063ffffffff16565b1015610267576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025e90610d23565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102b69190610d72565b925050819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103d557600080fd5b505afa1580156103e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040d9190610ddd565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049790610e7c565b60405180910390fd5b60005b60008054905081101561054b5760008082815481106104c5576104c4610e9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054390610ecb565b9150506104a3565b50600067ffffffffffffffff81111561056757610566610f14565b5b6040519080825280602002602001820160405280156105955781602001602082028036833780820191505090505b50600090805190602001906105ab929190610a5e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516105f290610f74565b60006040518083038185875af1925050503d806000811461062f576040519150601f19603f3d011682016040523d82523d6000602084013e610634565b606091505b505090508061064257600080fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072990610e7c565b60405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156107b557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161076b575b5050505050905060005b81518110156108405760008282815181106107dd576107dc610e9c565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061083890610ecb565b9150506107bf565b50600067ffffffffffffffff81111561085c5761085b610f14565b5b60405190808252806020026020018201604052801561088a5781602001602082028036833780820191505090505b50600090805190602001906108a0929190610a5e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108e790610f74565b60006040518083038185875af1925050503d8060008114610924576040519150601f19603f3d011682016040523d82523d6000602084013e610929565b606091505b505090508061093757600080fd5b5050565b60008082815481106109505761094f610e9c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061098e836109be565b90506000670de0b6b3a764000085836109a79190610f89565b6109b19190611012565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906110bb565b5050509150506402540be40081610a569190611136565b915050919050565b828054828255906000526020600020908101928215610ad7579160200282015b82811115610ad65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a7e565b5b509050610ae49190610ae8565b5090565b5b80821115610b01576000816000905550600101610ae9565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3582610b0a565b9050919050565b610b4581610b2a565b8114610b5057600080fd5b50565b600081359050610b6281610b3c565b92915050565b600060208284031215610b7e57610b7d610b05565b5b6000610b8c84828501610b53565b91505092915050565b6000819050919050565b610ba881610b95565b82525050565b6000602082019050610bc36000830184610b9f565b92915050565b610bd281610b2a565b82525050565b6000602082019050610bed6000830184610bc9565b92915050565b6000819050919050565b6000610c18610c13610c0e84610b0a565b610bf3565b610b0a565b9050919050565b6000610c2a82610bfd565b9050919050565b6000610c3c82610c1f565b9050919050565b610c4c81610c31565b82525050565b6000602082019050610c676000830184610c43565b92915050565b610c7681610b95565b8114610c8157600080fd5b50565b600081359050610c9381610c6d565b92915050565b600060208284031215610caf57610cae610b05565b5b6000610cbd84828501610c84565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d0d601b83610cc6565b9150610d1882610cd7565b602082019050919050565b60006020820190508181036000830152610d3c81610d00565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d7d82610b95565b9150610d8883610b95565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dbd57610dbc610d43565b5b828201905092915050565b600081519050610dd781610c6d565b92915050565b600060208284031215610df357610df2610b05565b5b6000610e0184828501610dc8565b91505092915050565b7f596f7520617265206e6f7420746865206f776e6572206f66207468697320636f60008201527f6e74726163742100000000000000000000000000000000000000000000000000602082015250565b6000610e66602783610cc6565b9150610e7182610e0a565b604082019050919050565b60006020820190508181036000830152610e9581610e59565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610ed682610b95565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f0957610f08610d43565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f5e600083610f43565b9150610f6982610f4e565b600082019050919050565b6000610f7f82610f51565b9150819050919050565b6000610f9482610b95565b9150610f9f83610b95565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fd857610fd7610d43565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101d82610b95565b915061102883610b95565b92508261103857611037610fe3565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106281611043565b811461106d57600080fd5b50565b60008151905061107f81611059565b92915050565b6000819050919050565b61109881611085565b81146110a357600080fd5b50565b6000815190506110b58161108f565b92915050565b600080600080600060a086880312156110d7576110d6610b05565b5b60006110e588828901611070565b95505060206110f6888289016110a6565b945050604061110788828901610dc8565b935050606061111888828901610dc8565b925050608061112988828901611070565b9150509295509295909350565b600061114182611085565b915061114c83611085565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561118b5761118a610d43565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111c8576111c7610d43565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561120557611204610d43565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561124257611241610d43565b5b82820290509291505056fea2646970667358221220ec93b45c24457184c43f7ffd429216a3946aeef41843b98b0d14a3ad7b2fcbb464736f6c63430008080033",
  "devdoc": {
    "author": "Edoardo Busano",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "getAddressToAmountFunded(address)": {
        "params": {
          "fundingAddress": "the address of the funder"
        },
        "returns": {
          "_0": "the amount funded"
        }
      }
    },
    "title": "A sample Funding Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "Funds our contract based on the ETH/USD price"
      },
      "getAddressToAmountFunded(address)": {
        "notice": "Gets the amount that an address has funded"
      }
    },
    "notice": "This contract is for creating a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 65,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 69,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}